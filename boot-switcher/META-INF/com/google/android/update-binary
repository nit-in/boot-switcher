#! /sbin/sh

DEVICE="beryllium"
ROOT="/data/.stowaways/sailfishos"
BOOT_DIR="$ROOT/boot"
DROID_BOOT="$BOOT_DIR/droid-boot.img"
HYBRIS_BOOT="$BOOT_DIR/hybris-boot.img"
TARGET_FILE="$BOOT_DIR/target_file"
BOOTIMAGE="/dev/block/bootdevice/by-name/"

#check if device is poco f1
CURRENT_DEVICE="getprop ro.product.device"

OUTFD="/proc/self/fd/$2" # e.g. "/proc/self/fd/28"

# Set progress bar percentage using a fraction ($1) in range 0.00 - 1.00
set_progress() { echo -e "set_progress $1\n" > $OUTFD; }

# Print some text ($1) on the screen
ui_print() { [ -z "$1" ] && echo -e "ui_print  \nui_print" > $OUTFD || echo -e "ui_print $@\nui_print" > $OUTFD; }
abort() { ui_print "E$1: $2"; cleanup; exit $1; }


#check device 
device_check(){
    if [[ ! -z "$CURRENT_DEVICE" = "$DEVICE"  ]]; then
        echo "$CURRENT_DEVICE is not $DEVICE"
        abort 7 "This package is for '$DEVICE' devices; this is a '$CURRENT_DEVICE'."
    fi
}

device_check
echo "Device test successful" 


switch(){

    if [ -f $TARGET_FILE ]; then
        backup_droid_boot
        flash_hybris_boot
        rm -f $TARGET_FILE
    else
        backup_hybris_boot
        flash_droid_boot
        touch $TARGET_FILE
    fi
}

backup_droid_boot(){

    echo "Making backup of android boot image"
    dd if=/dev/block/bootdevice/by-name/boot of=$DROID_BOOT || abort 8 "backup of current boot image failed."
            
}

backup_hybris_boot(){
    
    echo "Making backup of hybris boot image"
    dd if=/dev/block/bootdevice/by-name/boot of=$HYBRIS_BOOT || abort 8 "backup of current boot image failed."
            
}

flash_droid_boot(){

    echo "Flashing droid boot image"
    
        ui_print "                  .od.        .do."
        ui_print "                   'kOolllllloOk'"
        ui_print "                 .cdl:'.    .':ldc."
        ui_print "                ;xl''          ''lx;"
        ui_print "               ;k:   ::      ::   :k;"
        ui_print "              .xx..................xx."
        ui_print "              .okddddddddddddddddddko."
        ui_print "         .loo:,dxolllllllllllllllloxo,:ool."
        ui_print "         ox.:kxkl                  lkxk:.xo"
        ui_print "         dd.  xkc                  ckx  .dd"
        ui_print "         od.  xkc                  ckx  .do"
        ui_print "         od.  xkc                  ckx  .do"
        ui_print "         od.  xkc                  ckx  .do"
        ui_print "         ckc,kokc                  ckok,ckc"
        ui_print "          ,c:.'kl                  lk'.:c,"
        ui_print "               :dlcc.  .cccc.  .ccld:"
        ui_print "                .'cOo  oOooOo  oOc'."
        ui_print "                  .xo  ox,,xo  ox."
        ui_print "                  .dx''xo..ox''xd."
        ui_print "                   ,k00k,  ,k00k,"
    
    dd if=$DROID_BOOT of=/dev/block/bootdevice/by-name/boot || abort 5 "writing boot image failed."
    
}

flash_hybris_boot(){
    
    echo "Flashing hybris boot image"
    
        ui_print "                          .':oOl."
        ui_print "                       ':c::;ol."
        ui_print "                    .:do,   ,l."
        ui_print "                  .;k0l.   .ll.             .."
        ui_print "                 'ldkc   .,cdoc:'.    ..,;:::;"
        ui_print "                ,o,;o'.;::;'.  'coxxolc:;'."
        ui_print "               'o, 'ddc,.    .;::::,."
        ui_print "               cl   ,x:  .;:c:,."
        ui_print "               ;l.   .:ldoc,."
        ui_print "               .:c.    .:ll,"
        ui_print "                 'c;.    .;l:"
        ui_print "                   :xc.    ,o'"
        ui_print "                   'xxc.   ;o."
        ui_print "                   :l'c: ,lo,"
        ui_print "                  ,o'.ooclc'"
        ui_print "                .:l,,x0o;."
        ui_print "              .;llcldl,"
        ui_print "           .,oOOoc:'"
        ui_print "       .,:lddo:'."
        ui_print "      oxxo;."    
    
    dd if=$HYBRIS_BOOT of=/dev/block/bootdevice/by-name/boot || abort 5 "writing boot image failed."
    
}

force_decrypt(){
    
    mount -o rw vendor
    sed -i "s/forceencrypt/encryptable/g" /vendor/etc/fstab.qcom || abort 9 "could not disable force encryption";
    umount vendor
}


switch
force_decrypt
exit 0
